class Solution {
public:
string longestPalindrome(string s) {
int size = s.length(); //find the size of the string
if(size <= 1) //if size is equall to one than return original string
{
return s;
}
int start = 0;
int end = 0;
int max_length = 1;
//This is for odd condition if the size of the string is odd then
for(int i = 0; i < size - 1; i++)
{
int l = i;
int r = i;
while(l >= 0 && r < size)
{
if(s[l] == s[r])
{
l--;
r++;
}
else
{
break;
}
}
int length = r - l - 1;
if(length > max_length)
{
max_length = length;
start = l+1;
end = r - 1;
}
}
// This is for even condition when length of the string is an even
for(int i = 0; i < size - 1; i++)
{
int l = i;
int r = i + 1;
while(l >= 0 && r < size)
{
if(s[l] == s[r])
{
l--;
r++;
}
else
{
break;
}
}
int length = r - l - 1;
if(length > max_length)
{
max_length = length;
start = l+1;
end = r - 1;
}
}
return s.substr(start, max_length);

}
};